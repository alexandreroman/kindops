#!/bin/bash
#
# Copyright 2022 VMware Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

set -euo pipefail

APP_NAME=kindops
APP_VERSION=0.1.0

GITOPS_URL=https://github.com/alexandreroman/kindops.git
GITOPS_REV=main

FLUXCD_VERSION=0.36.0

help() {
  cat <<EOF
Usage: $APP_NAME <command>
Available commands:
  create             Create a KinD cluster
  destroy            Destroy a KinD cluster
  install <service>  Install a GitOps-powered service
  help               Show this help message
  version            Display app version
EOF
}

version() {
  echo "$APP_NAME $APP_VERSION"
  echo "Copyright (c) 2022 VMware Inc."
}

check_command_exists() {
  BIN=$1
  hash "$BIN" 2>/dev/null || { echo >&2 "Command not found: $BIN. Aborting üíÄ"; exit 1; }
} 

create_cluster() {
  check_command_exists "kind"
  check_command_exists "kubectl"
  check_command_exists "helm"

  echo "Generating KinD cluster configuration ‚úçÔ∏è"
  CFG=$(mktemp)
  cat <<EOF > "$CFG"
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
name: $APP_NAME
nodes:
- role: control-plane
  image: kindest/node:v1.24.7@sha256:577c630ce8e509131eab1aea12c022190978dd2f745aac5eb1fe65c0807eb315
  kubeadmConfigPatches:
  - |
    kind: InitConfiguration
    nodeRegistration:
      kubeletExtraArgs:
        node-labels: "ingress-ready=true"
  extraPortMappings:
  - containerPort: 31080
    listenAddress: 127.0.0.1
    hostPort: 80
EOF

  echo "Creating KinD cluster üé¨"
  kind create cluster --config "$CFG"

  echo "Waiting for cluster ‚è±Ô∏è"
  kubectl wait pod --timeout=-1s --for=condition=Ready -l '!job-name' -n kube-system > /dev/null

  install_flux
}

destroy_cluster() {
  check_command_exists "kind"
  kind delete cluster --name $APP_NAME
}

install_service() {
  SVC="$1"
  check_command_exists "kubectl"

  echo "Installing $SVC üéâ"
  cat <<EOF | kubectl apply -f -
apiVersion: kustomize.toolkit.fluxcd.io/v1beta2
kind: Kustomization
metadata:
  name: $SVC
  namespace: $APP_NAME
spec:
  interval: 1m
  path: ./services/$SVC
  wait: true
  prune: true
  force: true
  timeout: 3m0s
  retryInterval: 2m0s
  sourceRef:
    kind: GitRepository
    name: $APP_NAME
EOF

  echo "Waiting for service ‚è±Ô∏è"
  kubectl wait kustomization --timeout=-1s --for=condition=Ready $SVC -n $APP_NAME > /dev/null
}

install_flux() {
  check_command_exists "kubectl"
  echo "Installing Flux üõû"
  n=0
  until [ $n -ge 2 ]; do
    kubectl apply -f https://github.com/fluxcd/flux2/releases/download/v$FLUXCD_VERSION/install.yaml  
    n=$[$n+1]
    sleep 5
  done

  echo "Waiting for initialization ‚è±Ô∏è"
  kubectl wait pod --timeout=-1s --for=condition=Ready -l '!job-name' -n flux-system > /dev/null

  cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Namespace
metadata:
  name: $APP_NAME
---
apiVersion: source.toolkit.fluxcd.io/v1beta1
kind: GitRepository
metadata:
  name: $APP_NAME
  namespace: $APP_NAME
spec:
  interval: 5m
  url: $GITOPS_URL
  ref:
    branch: $GITOPS_REV
---
apiVersion: kustomize.toolkit.fluxcd.io/v1beta2
kind: Kustomization
metadata:
  name: default
  namespace: $APP_NAME
spec:
  interval: 1m
  path: ./services/default
  wait: true
  prune: true
  force: true
  timeout: 3m0s
  retryInterval: 2m0s
  sourceRef:
    kind: GitRepository
    name: $APP_NAME
EOF

  echo "Waiting for default configuration ‚è±Ô∏è"
  kubectl wait kustomization --timeout=-1s --for=condition=Ready default -n $APP_NAME > /dev/null

  echo "Cluster up and running ‚úÖ"
  echo "Happy hacking!"
}

if [ "$#" -eq 0 ]; then
  help
  exit 2
fi

CMD="$1"
case "$CMD" in
help)
  help
  ;;
version)
  version
  ;;
create)
  create_cluster
  ;;
destroy)
  destroy_cluster
  ;;
install)
  if ! [ "$#" -eq 2 ]; then
    echo "Please go to this page to see available services:"
    echo "  $APP_GITOPS_URL"
    echo "No service set. Aborting üíÄ"
    exit 2
  fi
  install_service "$2"
  ;;
*)
  help; exit 2
  ;;
esac
